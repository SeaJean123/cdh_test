[flake8]
max-line-length = 120
# F401 "module imported but unused" which is fine for init and conftest files
per-file-ignores =
    __init__.py:F401
    conftest.py:F401
    *_test.py:D101,D102,D103
    test_*.py:D101,D102,D103
extend-ignore =
    # E203,E231 black auto-formatter does not conform to these
    E203, E231,
    # B001 duplicates E722 (bare-exception)
    B001,
    # D100 "Missing docstring in public module" a module is most of the time only one class and therefore this is redundant
    D100,
    # D107 "Missing docstring in __init__" we are not expecting useful content here
    D107,
    # F401 "imported but unused" pylint does that
    F401,
max-pos-args = 4
docstring-convention = pep257

[pylint]
ignore = setup.py
score=no
disable = line-too-long, # done by black
    too-many-instance-attributes, too-few-public-methods, # breaks with our class design
    logging-fstring-interpolation, # f strings have a better readability and performance impact is minimal
    missing-module-docstring, missing-function-docstring, missing-class-docstring, # we use flake8-docstrings
    import-error, no-name-in-module, # should be checked by unittests and causes problems in venv

[pylint.SIMILARITIES]
ignore-imports=yes
min-similarity-lines=5

[tool:pytest]
filterwarnings =
  ignore::DeprecationWarning:botocore.*:
  ignore::DeprecationWarning:jose.*:
  ignore::DeprecationWarning:boto.*:
  ignore::marshmallow.warnings.RemovedInMarshmallow4Warning
  ignore::UserWarning:moto.*:
norecursedirs =
  build
  src/functional_tests
  infrastructure/bin
junit_suite_name = cdh-core

[coverage:run]
branch = True
parallel = True

[coverage:report]
omit =
    *_test.py
    */.pyenv/*
    *conftest.py
    setup.py

[mypy]
mypy_path = src/cdh_applications, src/cdh_core, src/cdh_core_dev_tools, src/lambdas, src/cdh_core_dev_tools/cdh_core_dev_tools/stubs
strict = True
plugins = marshmallow_dataclass.mypy
namespace_packages = False

[importlinter]
include_external_packages = True
root_packages =
    cdh_applications
    cdh_core
    cdh_core_dev_tools
    example_lambda
    notify_teams
    logs_subscription
    cdh_billing.cdh_billing
    cdh_core_api.cdh_core_api
    s3_attribute_extractor
    glue_housekeeping
    # add new lambdas here

[importlinter:contract:forbidden modules]
name = Deny certain external packages
type = forbidden
source_modules =
    cdh_core
    cdh_core_dev_tools
    example_lambda
    notify_teams
    logs_subscription
    cdh_billing.cdh_billing
    cdh_core_api.cdh_core_api
    s3_attribute_extractor
    glue_housekeeping
    # add new lambdas here
    cdh_applications
forbidden_modules =
    mock

[importlinter:contract:overall package layers]
name = cdh_core, cdh_core_dev_tools do not use lambda code
type = layers
layers=
    # cdh_applications should not be imported anywhere else
    cdh_applications
    # add new lambdas below this line
    glue_housekeeping
    s3_attribute_extractor
    cdh_core_api.cdh_core_api
    cdh_billing.cdh_billing
    notify_teams
    logs_subscription
    example_lambda
    cdh_core
    cdh_core_dev_tools

[importlinter:contract:independence of lambdas]
name = Lambdas to not use code of each other
type = independence
modules =
    example_lambda
    logs_subscription
    cdh_billing.cdh_billing
    cdh_core_api.cdh_core_api
    s3_attribute_extractor
    glue_housekeeping
    # add new lambdas here

[importlinter:contract:cdh-core layer]
name = Abstraction layers within the cdh-core package
type = layers
layers=
    cdh_core.clients
    cdh_core.aws_clients
    cdh_core.log
    cdh_core.entities
    cdh_core.enums
    cdh_core.primitives
    cdh_core.config
    cdh_core.exceptions
    cdh_core.dataclasses_json_cdh


[importlinter:contract:cdh_core_api import layers]
name = Import layers for cdh_core_api
type = layers
layers =
    cdh_core_api.cdh_core_api.endpoints
    cdh_core_api.cdh_core_api.services
    cdh_core_api.cdh_core_api.catalog
    cdh_core_api.cdh_core_api.validation
    cdh_core_api.cdh_core_api.api
