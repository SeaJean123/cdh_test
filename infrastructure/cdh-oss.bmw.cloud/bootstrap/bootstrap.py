# Copyright (C) 2022, Bayerische Motoren Werke Aktiengesellschaft (BMW AG)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import argparse
import logging
import subprocess
import sys
from contextlib import contextmanager
from pathlib import Path
from tempfile import NamedTemporaryFile
from textwrap import dedent
from typing import Generator
from typing import Tuple

import boto3

from cdh_core.entities.account_store import AccountStore
from cdh_core.entities.accounts import SecurityAccount
from cdh_core.entities.arn import Arn
from cdh_core.enums.aws import Partition
from cdh_core.enums.aws import Region
from cdh_core.enums.environment import Environment
from cdh_core.enums.hubs import Hub
from cdh_core.primitives.account_id import AccountId

# flake8: noqa: B028

LOG = logging.getLogger(__name__)


def _call_shell(cmd: str) -> None:
    subprocess.check_call(cmd, shell=True, cwd=Path(__file__).parent)


def _run_terraform(  # pylint: disable=too-many-arguments
    backend_config_path: str,
    env: Environment,
    saml_file_path: str,
    auth_domain: str,
    destroy: bool,
    auto_approve: bool,
    create_idp: bool,
) -> None:
    _call_shell(f"terraform init -reconfigure -backend-config {backend_config_path} -lockfile=readonly")
    action = "destroy" if destroy else "apply"
    _call_shell(
        f"terraform {action} -var='environment={env.value}' -var='saml_file_path={saml_file_path}'"
        f" -var='auth_domain={auth_domain}' -var='create_idp={1 if create_idp else 0}' "
        f"{'-auto-approve' if auto_approve else ''}"
    )


def _get_current_account_id() -> AccountId:
    caller_arn = Arn(boto3.client("sts").get_caller_identity()["Arn"])
    return caller_arn.account_id


def _state_name(security_account_id: AccountId, deployment_prefix: str) -> str:
    return f"{deployment_prefix}cdh-bootstrapping-terraform-states-{security_account_id}"


@contextmanager
def _write_backend_config(
    account_id: AccountId, security_account: SecurityAccount, deployment_prefix: str, security_account_profile: str
) -> Generator[str, None, None]:
    content = dedent(
        f"""\
            region         = "{Region.preferred(security_account.partition).value}"
            bucket         = "{_state_name(security_account.id, deployment_prefix)}"
            dynamodb_table = "{_state_name(security_account.id, deployment_prefix)}"
            key            = "{account_id}"
            profile        = "{security_account_profile}"
        """
    )
    with NamedTemporaryFile("w", suffix=".hcl", prefix="backend-config") as file:
        file.write(content)
        file.seek(0)
        yield file.name


def _remove_state_file(
    account_id: AccountId, security_account: SecurityAccount, deployment_prefix: str, security_account_profile: str
) -> None:
    session = boto3.session.Session(profile_name=security_account_profile)
    state_bucket = session.resource("s3").Bucket(_state_name(security_account.id, deployment_prefix))
    state_bucket.object_versions.filter(Prefix=account_id).delete()


def _parse_args() -> Tuple[AccountId, Hub, Environment, str, bool, str, str, str, bool, bool]:
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--account-id",
        required=True,
        type=AccountId,
        help="The account to bootstrap. Call the script with valid admin credentials for that account.",
    )
    parser.add_argument(
        "--env",
        required=True,
        type=Environment,
        help="The environment for which the account is to be bootstrapped.",
    )
    parser.add_argument(
        "--saml-file-path",
        required=True,
        type=str,
        help="The path to the saml metadata file (xml document generated by an identity provider).",
    )
    parser.add_argument(
        "--hub",
        required=False,
        type=Hub,
        help=(
            "The hub for which the account is to be bootstrapped. "
            "Defaults to the configured default hub. "
            "Requires the presence of an AWS profile for the configured security account of that hub."
        ),
    )
    parser.add_argument(
        "--destroy",
        required=False,
        action="store_true",
        help="Revert the bootstrapping process by performing terraform destroy.",
    )
    parser.add_argument(
        "--deployment-prefix",
        required=False,
        default="",
        type=str,
        help="Supplement our prefixing for cases where we don't use it internally, mostly important for create-cdh.",
    )
    parser.add_argument(
        "--auth-domain",
        required=False,
        default="iam.cdh-oss.bmw.cloud",
        type=str,
        help="Parent domain of the various apis belonging to the cdh-auth stack.",
    )
    parser.add_argument(
        "--security-account-profile",
        required=False,
        default="",
        type=str,
        help="AWS profile name to use with security account",
    )
    parser.add_argument(
        "--auto-approve",
        required=False,
        action="store_true",
        help="Skip interactive approval steps.",
    )
    parser.add_argument(
        "--skip-idp-creation",
        required=False,
        action="store_false",
        dest="create_idp",
        help="Assume the SAML identity provider is already deployed.",
    )
    args = parser.parse_args()

    hub = args.hub or Hub.default(Partition.default())
    return (
        args.account_id,
        hub,
        args.env,
        args.saml_file_path,
        args.destroy,
        args.deployment_prefix,
        args.auth_domain,
        args.security_account_profile,
        args.auto_approve,
        args.create_idp,
    )


def _confirmation_dialog(text: str, auto_approve: bool) -> None:
    if auto_approve:
        LOG.info(text)
        return
    response = input(f"{text} - continue (y/n)?")
    if response.lower() != "y":
        sys.exit(1)


def main() -> None:
    """Deploy or destroy the bootstrap stack in a given account."""
    (
        account_id,
        hub,
        env,
        saml_file_path,
        destroy,
        deployment_prefix,
        auth_domain,
        security_account_profile,
        auto_approve,
        create_idp,
    ) = _parse_args()
    current_account_id = _get_current_account_id()
    if account_id != current_account_id:
        raise AssertionError(
            f"Requested to bootstrap account {account_id!r}, but running script as {current_account_id!r}."
        )
    security_account = AccountStore().get_security_account_for_hub(hub)
    security_account_profile = security_account_profile or security_account.alias
    _confirmation_dialog(
        text=f"{'Reverting bootstrapping' if destroy else 'Bootstrapping'} {account_id=} for {env=} and {hub=}. "
        f"Make sure a valid AWS profile named {security_account_profile!r} exists and credentials are fetched for the "
        f"corresponding security account!",
        auto_approve=auto_approve,
    )
    with _write_backend_config(
        account_id, security_account, deployment_prefix, security_account_profile
    ) as backend_config_path:
        _run_terraform(
            backend_config_path=backend_config_path,
            env=env,
            saml_file_path=saml_file_path,
            auth_domain=auth_domain,
            destroy=destroy,
            auto_approve=auto_approve,
            create_idp=create_idp,
        )
    if destroy:
        _remove_state_file(account_id, security_account, deployment_prefix, security_account_profile)


if __name__ == "__main__":
    main()
