# Copyright (C) 2022, Bayerische Motoren Werke Aktiengesellschaft (BMW AG)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

variable "environment" {
  type = string
}
variable "resource_name_prefix" {
  type    = string
  default = ""
}
variable "deployment_prefix" {
  type        = string
  default     = ""
  description = "Supplement our prefixing for cases where we don't use it internally. If set, should be the same as the resource_name_prefix."
}
variable "cdh_core_config_file_path" {
  type    = string
  default = "../cdh-core-config-test-deployment.yaml"
}
variable "attribute_extractor_reserved_concurrency" {
  type    = number
  default = -1
}
variable "regional_layers_buckets_names" {
  type    = string
  default = "{ {%- for region in regions.values() -%} \"{{ region }}\" : \"\"{{ ", " if not loop.last else "" }}  {%- endfor -%} }"
}
variable "regional_athena_query_results_buckets_names" {
  type    = string
  default = "{ {%- for region in regions.values() -%} \"{{ region }}\" : \"\"{{ ", " if not loop.last else "" }}  {%- endfor -%} }"
}
variable "set_glue_catalog_policy" {
  type    = bool
  default = null
}
variable "trusted_org_ids" {
  type    = list(string)
  default = ["not-set"]
}
variable "user_account_ids" {
  type    = list(string)
  default = []
}

data "external" "api-accounts" {
  program = ["python", "${path.module}/{{ base_path }}/bin/get_accounts.py"]
  query = {
    environment : var.environment
    purpose : "api"
    partition : data.aws_partition.current.partition
  }
}

data "external" "default-security-account" {
  program = ["python", "${path.module}/{{ base_path }}/bin/get_accounts.py"]
  query = {
    purpose : "security"
    partition : data.aws_partition.current.partition
    default_hub_only : "true"
  }
}

data "external" "accounts" {
  program = ["python", "${path.module}/{{ base_path }}/bin/get_accounts.py"]
  query = {
    environment : var.environment
    partition : data.aws_partition.current.partition
  }
}

data "external" "portal-accounts" {
  program = ["python", "${path.module}/{{ base_path }}/bin/get_accounts.py"]
  query = {
    environment : var.environment
    partition : data.aws_partition.current.partition
    purpose : "portal"
  }
}

data "external" "test-environments" {
  program = ["python", "${path.module}/{{ base_path }}/bin/get_environments.py"]
  query = {
    test_environments_only : "true"
  }
}

locals {
  api_account_id      = keys(data.external.api-accounts.result)[0]             # there is only one
  security_account_id = keys(data.external.default-security-account.result)[0] # there is only one security account in the default hub
  portal_account_ids  = keys(data.external.portal-accounts.result)
  assumable_role_allowed_arn_list = [
    "arn:${data.aws_partition.current.partition}:iam::${local.api_account_id}:role/${var.resource_name_prefix}cdh-core-api",
    "arn:${data.aws_partition.current.partition}:iam::${data.aws_caller_identity.current.account_id}:role/${local.admin_role_name}"
  ]
  regional_layers_buckets_names               = jsondecode(var.regional_layers_buckets_names)
  should_create_layers_buckets                = { for k, v in local.regional_layers_buckets_names : k => v == "" ? var.resource_name_prefix == "" : false }
  layers_buckets_names                        = { for k, v in local.regional_layers_buckets_names : k => v == "" ? "${var.deployment_prefix}cdh-core-layers-${data.aws_caller_identity.current.account_id}-resources-${k}" : v } # will be removed in CDHX-20135
  regional_athena_query_results_buckets_names = jsondecode(var.regional_athena_query_results_buckets_names)
  should_create_athena_query_results_buckets  = { for k, v in local.regional_athena_query_results_buckets_names : k => v == "" ? var.resource_name_prefix == "" : false }
  athena_query_results_buckets_names          = { for k, v in local.regional_athena_query_results_buckets_names : k => v == "" ? "${var.deployment_prefix}aws-athena-query-results-${data.aws_caller_identity.current.account_id}-${k}" : v } # will be removed in CDHX-20135
  set_glue_catalog_policy                     = var.set_glue_catalog_policy == null ? var.resource_name_prefix == "" : var.set_glue_catalog_policy
  trusted_org_ids                             = var.trusted_org_ids == tolist(["not-set"]) ? [] : var.trusted_org_ids
}
